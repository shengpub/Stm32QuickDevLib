; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\mqtt.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\mqtt.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\Bsp -I..\MQTT -IC:\Users\gavinX\Desktop\GetWifiInfo\Project\STM32F10x_StdPeriph_Template\MDK-ARM\RTE\_STM32Project -Ie:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Ie:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\stm3210b-eval\mqtt.crf ..\User\Mqtt.c]
                          THUMB

                          AREA ||i.ConvDat||, CODE, READONLY, ALIGN=1

                  ConvDat PROC
;;;6      /*双字节转换，将高字节转为低字节*/
;;;7      uint16_t ConvDat(uint16_t dat)
000000  ba40              REV16    r0,r0
;;;8      {
;;;9      	uint16_t temp =0;
;;;10     
;;;11     	temp = ((dat % 256) << 8) | (dat / 256);
;;;12     
;;;13     	return temp;
;;;14     }
000002  4770              BX       lr
;;;15     
                          ENDP


                          AREA ||i.MQTTConnectServer||, CODE, READONLY, ALIGN=2

                  MQTTConnectServer PROC
;;;16     /*前面已经通过tcp连接到服务器的socket上，这里只需要命令的一个登录过程*/
;;;17     uint16_t MQTTConnectServer(uint16_t KeepOnlineTime,char *MessageBuf,uint16_t *MessageLen,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;18     													char *DeviceId,char *UserName,char *Password)
;;;19     /*deviceId,设备的id号码，UserName：项目ID，Passwd:权限信息*/
;;;20     {
000004  b095              SUB      sp,sp,#0x54
000006  460f              MOV      r7,r1
000008  4683              MOV      r11,r0
;;;21     	MQTTConnect MQTTConnectPar;
;;;22     	char ucDeviceIdBuff[USER_BUFF_LEN] = {0};/*用户信息数组*/
00000a  211c              MOVS     r1,#0x1c
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       __aeabi_memclr4
;;;23     	char ucUserNameBuff[USER_BUFF_LEN] = {0};/*用户信息数组*/
000012  211c              MOVS     r1,#0x1c
000014  a807              ADD      r0,sp,#0x1c
000016  f7fffffe          BL       __aeabi_memclr4
;;;24     	char ucPasswordBuff[USER_BUFF_LEN] = {0};/*用户信息数组*/
00001a  211c              MOVS     r1,#0x1c
00001c  a80e              ADD      r0,sp,#0x38
00001e  f7fffffe          BL       __aeabi_memclr4
;;;25     	uint8_t DeviceIdLen = 0;	/*长度*/
;;;26     	uint8_t UserNmaeLen = 0;
;;;27     	uint8_t PasswordlLen =0;
;;;28     	
;;;29     	
;;;30     	if(DeviceId == NULL || UserName == NULL || Password == NULL)
000022  9818              LDR      r0,[sp,#0x60]
000024  2800              CMP      r0,#0
000026  d045              BEQ      |L2.180|
000028  9822              LDR      r0,[sp,#0x88]
00002a  2800              CMP      r0,#0
00002c  d042              BEQ      |L2.180|
00002e  9823              LDR      r0,[sp,#0x8c]
000030  2800              CMP      r0,#0
000032  d03f              BEQ      |L2.180|
;;;31     	{
;;;32     		LogMsgStr(LOG_DEBUG, "DeviceID Or UserName Or Password Is NULL\n");
;;;33     		return 0;/*错误退出*/
;;;34     	}
;;;35     	
;;;36     	/*固定不变的部分*/
;;;37     	MQTTConnectPar.sHeader.ucPacketType |= (MQTT_PKT_CONNECT << 4);/*登录*/
000034  f0450010          ORR      r0,r5,#0x10
000038  f3600507          BFI      r5,r0,#0,#8
;;;38     	MQTTConnectPar.sHeader.ucRemainingLenth = (sizeof(MQTTConnect) - 2) + DeviceIdLen +2 + UserNmaeLen +2 + PasswordlLen + 2;/*余下的长度*/
00003c  2010              MOVS     r0,#0x10
00003e  f360250f          BFI      r5,r0,#8,#8
000042  f04f0800          MOV      r8,#0
;;;39     	
;;;40     	/*可变部分*/
;;;41     	MQTTConnectPar.uiProtocolNameLength = ConvDat(0x04);
000046  2004              MOVS     r0,#4
000048  f7fffffe          BL       ConvDat
00004c  f360451f          BFI      r5,r0,#16,#16
;;;42     	MQTTConnectPar.uiMqttName[0] = 'M';
000050  204d              MOVS     r0,#0x4d
000052  f3600407          BFI      r4,r0,#0,#8
;;;43     	MQTTConnectPar.uiMqttName[1] = 'Q';
000056  2051              MOVS     r0,#0x51
000058  f360240f          BFI      r4,r0,#8,#8
;;;44     	MQTTConnectPar.uiMqttName[2] = 'T';
00005c  2054              MOVS     r0,#0x54
00005e  f3604417          BFI      r4,r0,#16,#8
000062  f360641f          BFI      r4,r0,#24,#8
;;;45     	MQTTConnectPar.uiMqttName[3] = 'T';/*存放的是ASSIC码*/
;;;46     	MQTTConnectPar.ucProtocolLevel = 0x04;
000066  2004              MOVS     r0,#4
000068  f3600607          BFI      r6,r0,#0,#8
00006c  0a30              LSRS     r0,r6,#8
;;;47     	MQTTConnectPar.ucConnectFlag |= (CONNECT_USER_FLAGE | CONNECT_PASSWD_FLAGE);/*这两个标志必须为1，否则服务器不会理你*/
00006e  f04000c0          ORR      r0,r0,#0xc0
000072  f360260f          BFI      r6,r0,#8,#8
000076  46a9              MOV      r9,r5                 ;41
000078  46a2              MOV      r10,r4                ;44
;;;48     	MQTTConnectPar.ucKeepAliveTime = ConvDat(KeepOnlineTime);/*保持连接时间，最大为65535约18个小时*/
00007a  4658              MOV      r0,r11
00007c  f7fffffe          BL       ConvDat
000080  f360461f          BFI      r6,r0,#16,#16
000084  46b3              MOV      r11,r6
;;;49     	
;;;50     	/*负载*/
;;;51     	DeviceIdLen = strlen(DeviceId);
000086  9818              LDR      r0,[sp,#0x60]
000088  f7fffffe          BL       strlen
00008c  b2c4              UXTB     r4,r0
;;;52     	UserNmaeLen = strlen(UserName);
00008e  9822              LDR      r0,[sp,#0x88]
000090  f7fffffe          BL       strlen
000094  b2c5              UXTB     r5,r0
;;;53     	PasswordlLen = strlen(Password);
000096  9823              LDR      r0,[sp,#0x8c]
000098  f7fffffe          BL       strlen
00009c  b2c6              UXTB     r6,r0
;;;54     	
;;;55     	if(DeviceIdLen > USER_BUFF_LEN || UserNmaeLen > USER_BUFF_LEN || DeviceIdLen > USER_BUFF_LEN)
00009e  2c19              CMP      r4,#0x19
0000a0  d801              BHI      |L2.166|
0000a2  2d19              CMP      r5,#0x19
0000a4  d908              BLS      |L2.184|
                  |L2.166|
;;;56     	{
;;;57     		LogMsgStr(LOG_DEBUG, "DeviceIdLen Or UserNmaeLen Or DeviceIdLen overflow\n");
0000a6  a023              ADR      r0,|L2.308|
                  |L2.168|
0000a8  f7fffffe          BL       __2printf
;;;58     		return 0;/*错误退出*/
0000ac  2000              MOVS     r0,#0
                  |L2.174|
;;;59     	}
;;;60     	
;;;61     	ucDeviceIdBuff[0] = 0;/*高*/
;;;62     	ucDeviceIdBuff[1] = DeviceIdLen;/*低*/
;;;63     	
;;;64     	memcpy(&ucDeviceIdBuff[2],DeviceId,DeviceIdLen);
;;;65     	
;;;66     	ucUserNameBuff[0] = 0;/*高*/
;;;67     	ucUserNameBuff[1] = UserNmaeLen;/*低*/
;;;68     	
;;;69     	memcpy(&ucUserNameBuff[2],UserName,UserNmaeLen);
;;;70     	
;;;71     	ucPasswordBuff[0] = 0;/*高*/
;;;72     	ucPasswordBuff[1] = PasswordlLen;/*低*/
;;;73     	
;;;74     	memcpy(&ucPasswordBuff[2],Password,PasswordlLen);
;;;75     	
;;;76     	
;;;77     	memcpy(MessageBuf,&MQTTConnectPar,sizeof(MQTTConnect));/*固定头部复制*/
;;;78     	
;;;79     	memcpy(&MessageBuf[sizeof(MQTTConnect)],ucDeviceIdBuff,DeviceIdLen + 2);/*设备信息*/
;;;80     	
;;;81     	memcpy(&MessageBuf[sizeof(MQTTConnect) + DeviceIdLen +2 ],ucUserNameBuff,UserNmaeLen + 2);/*用户信息*/
;;;82     	
;;;83     	memcpy(&MessageBuf[sizeof(MQTTConnect) + DeviceIdLen +2 + UserNmaeLen +2 ],ucPasswordBuff,PasswordlLen + 2);/*密码信息*/
;;;84     	
;;;85     	*MessageLen = sizeof(MQTTConnect) + DeviceIdLen +2 + UserNmaeLen +2 + PasswordlLen + 2;
;;;86     	
;;;87     	return 1;
;;;88     }
0000ae  b019              ADD      sp,sp,#0x64
0000b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.180|
0000b4  a02c              ADR      r0,|L2.360|
0000b6  e7f7              B        |L2.168|
                  |L2.184|
0000b8  f88d8000          STRB     r8,[sp,#0]            ;61
0000bc  f88d4001          STRB     r4,[sp,#1]            ;62
0000c0  4622              MOV      r2,r4                 ;64
0000c2  f10d0002          ADD      r0,sp,#2              ;64
0000c6  9918              LDR      r1,[sp,#0x60]         ;64
0000c8  f7fffffe          BL       __aeabi_memcpy
0000cc  f88d801c          STRB     r8,[sp,#0x1c]         ;66
0000d0  f88d501d          STRB     r5,[sp,#0x1d]         ;67
0000d4  462a              MOV      r2,r5                 ;69
0000d6  f10d001e          ADD      r0,sp,#0x1e           ;69
0000da  9922              LDR      r1,[sp,#0x88]         ;69
0000dc  f7fffffe          BL       __aeabi_memcpy
0000e0  f88d8038          STRB     r8,[sp,#0x38]         ;71
0000e4  f88d6039          STRB     r6,[sp,#0x39]         ;72
0000e8  4632              MOV      r2,r6                 ;74
0000ea  f10d003a          ADD      r0,sp,#0x3a           ;74
0000ee  9923              LDR      r1,[sp,#0x8c]         ;74
0000f0  f7fffffe          BL       __aeabi_memcpy
0000f4  f8c79000          STR      r9,[r7,#0]            ;77
0000f8  f8c7a004          STR      r10,[r7,#4]           ;77
0000fc  f8c7b008          STR      r11,[r7,#8]           ;77
000100  1ca2              ADDS     r2,r4,#2              ;79
000102  4669              MOV      r1,sp                 ;79
000104  f107000c          ADD      r0,r7,#0xc            ;79
000108  f7fffffe          BL       __aeabi_memcpy
00010c  1938              ADDS     r0,r7,r4              ;81
00010e  1caa              ADDS     r2,r5,#2              ;81
000110  a907              ADD      r1,sp,#0x1c           ;81
000112  300e              ADDS     r0,r0,#0xe            ;81
000114  f7fffffe          BL       __aeabi_memcpy
000118  442c              ADD      r4,r4,r5              ;83
00011a  19e0              ADDS     r0,r4,r7              ;83
00011c  1cb2              ADDS     r2,r6,#2              ;83
00011e  a90e              ADD      r1,sp,#0x38           ;83
000120  3010              ADDS     r0,r0,#0x10           ;83
000122  f7fffffe          BL       __aeabi_memcpy
000126  9917              LDR      r1,[sp,#0x5c]         ;85
000128  19a0              ADDS     r0,r4,r6              ;85
00012a  3012              ADDS     r0,r0,#0x12           ;85
00012c  8008              STRH     r0,[r1,#0]            ;85
00012e  2001              MOVS     r0,#1                 ;87
000130  e7bd              B        |L2.174|
;;;89     uint16_t MQTTPublist(char *TopicName,char *MessageBuf,uint16_t *MessageLen)
                          ENDP

000132  0000              DCW      0x0000
                  |L2.308|
000134  44657669          DCB      "DeviceIdLen Or UserNmaeLen Or DeviceIdLen overflow\n",0
000138  63654964
00013c  4c656e20
000140  4f722055
000144  7365724e
000148  6d61654c
00014c  656e204f
000150  72204465
000154  76696365
000158  49644c65
00015c  6e206f76
000160  6572666c
000164  6f770a00
                  |L2.360|
000168  44657669          DCB      "DeviceID Or UserName Or Password Is NULL\n",0
00016c  63654944
000170  204f7220
000174  55736572
000178  4e616d65
00017c  204f7220
000180  50617373
000184  776f7264
000188  20497320
00018c  4e554c4c
000190  0a00    
000192  00                DCB      0
000193  00                DCB      0

                          AREA ||i.MQTTPublist||, CODE, READONLY, ALIGN=1

                  MQTTPublist PROC
;;;88     }
;;;89     uint16_t MQTTPublist(char *TopicName,char *MessageBuf,uint16_t *MessageLen)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
000002  b088              SUB      sp,sp,#0x20
000004  460c              MOV      r4,r1
000006  4606              MOV      r6,r0
;;;91     	MQTTPush MQTTPushStr;
;;;92     	char TopicNameBuf[USER_BUFF_LEN] = {0};
000008  211c              MOVS     r1,#0x1c
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memclr4
;;;93     	uint16_t TopicNameLen =0;
;;;94     	uint16_t PacketIdentifier;
;;;95     	
;;;96     	TopicNameLen = strlen(TopicName);
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       strlen
000016  b285              UXTH     r5,r0
;;;97     	
;;;98     	MQTTPushStr.sHeader.ucPacketType |= (MQTT_PKT_PUBLISH << 4);
000018  f89d001c          LDRB     r0,[sp,#0x1c]
;;;99     	MQTTPushStr.sHeader.ucRemainingLenth = 0;
;;;100    	
;;;101    	
;;;102    	
;;;103    	TopicNameBuf[0] = 0;
;;;104    	TopicNameBuf[1] = TopicNameLen;
;;;105    	
;;;106    	memcpy(&TopicNameBuf[2],TopicName,TopicNameLen);/*长度信息*/
00001c  462a              MOV      r2,r5
00001e  f0400030          ORR      r0,r0,#0x30           ;98
000022  f88d001c          STRB     r0,[sp,#0x1c]         ;98
000026  2000              MOVS     r0,#0                 ;99
000028  f88d0000          STRB     r0,[sp,#0]            ;103
00002c  f88d001d          STRB     r0,[sp,#0x1d]         ;99
000030  f88d5001          STRB     r5,[sp,#1]            ;104
000034  4631              MOV      r1,r6
000036  f10d0002          ADD      r0,sp,#2
00003a  f7fffffe          BL       __aeabi_memcpy
;;;107    	
;;;108    	memcpy(MessageBuf,&MQTTPushStr,sizeof(MQTTPush));/*保存开始头部*/
00003e  f8bd001c          LDRH     r0,[sp,#0x1c]
000042  8020              STRH     r0,[r4,#0]
;;;109    	
;;;110    	memcpy(&MessageBuf[sizeof(MQTTPush)],TopicNameBuf,TopicNameLen);/*拷贝数据*/
000044  462a              MOV      r2,r5
000046  4669              MOV      r1,sp
000048  1ca0              ADDS     r0,r4,#2
00004a  f7fffffe          BL       __aeabi_memcpy
;;;111    	
;;;112    	return 1;
;;;113    }
00004e  b008              ADD      sp,sp,#0x20
000050  2001              MOVS     r0,#1                 ;112
000052  bd70              POP      {r4-r6,pc}
                          ENDP

