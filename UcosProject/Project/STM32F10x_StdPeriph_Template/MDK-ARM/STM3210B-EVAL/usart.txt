; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\usart.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\usart.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\Bsp -I..\MQTT -IC:\Users\gavinX\Desktop\GetWifiInfo\Project\STM32F10x_StdPeriph_Template\MDK-ARM\RTE\_STM32Project -Ie:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Ie:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\stm3210b-eval\usart.crf ..\Bsp\Usart.c]
                          THUMB

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;135    
;;;136    void USART1_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;137    {
;;;138    	uint16_t BackData;
;;;139    	if(USART_GetITStatus(USART1,USART_IT_RXNE) != RESET)
000002  4c0c              LDR      r4,|L1.52|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d00e              BEQ      |L1.50|
;;;140    	 { 
;;;141    	 	USART_ClearITPendingBit(USART1,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;142    		BackData = USART_ReceiveData(USART1);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;143    		if(mdUsart.USART1_s.USARTUserDel != NULL)
000022  4905              LDR      r1,|L1.56|
000024  68ca              LDR      r2,[r1,#0xc]  ; mdUsart
000026  2a00              CMP      r2,#0
000028  d003              BEQ      |L1.50|
;;;144    		{
;;;145    			mdUsart.USART1_s.USARTUserDel(BackData,0);/*执行用户中断处理函数*/
00002a  e8bd4070          POP      {r4-r6,lr}
00002e  2100              MOVS     r1,#0
000030  4710              BX       r2
                  |L1.50|
;;;146    		}
;;;147    	 }
;;;148    	 
;;;149    }
000032  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

                  |L1.52|
                          DCD      0x40013800
                  |L1.56|
                          DCD      ||.bss||

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;150    
;;;151    void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;152    {
;;;153    	uint16_t BackData;
;;;154    	if(USART_GetITStatus(USART2,USART_IT_RXNE) != RESET)
000002  4c0c              LDR      r4,|L2.52|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d00e              BEQ      |L2.50|
;;;155    	 { 
;;;156    	 	USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;157    		BackData = USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;158    		if(mdUsart.USART2_s.USARTUserDel != NULL)
000022  4905              LDR      r1,|L2.56|
000024  69ca              LDR      r2,[r1,#0x1c]  ; mdUsart
000026  2a00              CMP      r2,#0
000028  d003              BEQ      |L2.50|
;;;159    		{
;;;160    			mdUsart.USART2_s.USARTUserDel(BackData,0);/*执行用户中断处理函数*/
00002a  e8bd4070          POP      {r4-r6,lr}
00002e  2100              MOVS     r1,#0
000030  4710              BX       r2
                  |L2.50|
;;;161    		}
;;;162    	 } 
;;;163    }
000032  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L2.52|
                          DCD      0x40004400
                  |L2.56|
                          DCD      ||.bss||

                          AREA ||i.USARTConfig||, CODE, READONLY, ALIGN=1

                  USARTConfig PROC
;;;37     
;;;38     void USARTConfig(USART_TypeDef* USARTx,USARTInfo_s *UsartInfo)
000000  b530              PUSH     {r4,r5,lr}
;;;39     {
000002  b087              SUB      sp,sp,#0x1c
000004  460c              MOV      r4,r1
000006  4605              MOV      r5,r0
;;;40     	USART_InitTypeDef USART_Init_Structure;
;;;41     	USART_ClockInitTypeDef USART_ClockInitStructure;
;;;42     
;;;43     	USART_DeInit(USARTx);
000008  f7fffffe          BL       USART_DeInit
;;;44     	
;;;45     	USART_Init_Structure.USART_BaudRate = UsartInfo->USART_BaudRate;//波特率
00000c  68a0              LDR      r0,[r4,#8]
;;;46     	USART_Init_Structure.USART_WordLength = USART_WordLength_8b;
00000e  2100              MOVS     r1,#0
000010  9000              STR      r0,[sp,#0]
;;;47     	USART_Init_Structure.USART_StopBits = USART_StopBits_1;	 //停止位位1
;;;48     	USART_Init_Structure.USART_Parity = USART_Parity_No;	//偶校验
000012  f8ad1008          STRH     r1,[sp,#8]
;;;49     	USART_Init_Structure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//不是用硬件流控制
;;;50     	USART_Init_Structure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000016  200c              MOVS     r0,#0xc
000018  f8ad000a          STRH     r0,[sp,#0xa]
;;;51     	USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;
;;;52     	USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;
;;;53     	USART_ClockInitStructure.USART_CPHA = USART_CPHA_1Edge;
00001c  f8ad1014          STRH     r1,[sp,#0x14]
000020  f8ad1004          STRH     r1,[sp,#4]            ;46
000024  f8ad1010          STRH     r1,[sp,#0x10]         ;51
;;;54     	USART_ClockInitStructure.USART_LastBit = USART_LastBit_Enable;
000028  f44f7080          MOV      r0,#0x100
00002c  f8ad1006          STRH     r1,[sp,#6]            ;47
000030  f8ad100c          STRH     r1,[sp,#0xc]          ;49
000034  f8ad1012          STRH     r1,[sp,#0x12]         ;52
000038  f8ad0016          STRH     r0,[sp,#0x16]
;;;55     
;;;56     	USART_Init(USARTx,&USART_Init_Structure);
00003c  4669              MOV      r1,sp
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       USART_Init
;;;57     	USART_ClockInit(USARTx,&USART_ClockInitStructure);
000044  a904              ADD      r1,sp,#0x10
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       USART_ClockInit
;;;58     
;;;59     	USART_Cmd(USARTx,ENABLE);
00004c  2101              MOVS     r1,#1
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       USART_Cmd
;;;60     	USART_ClearFlag(USARTx,USART_FLAG_TC);
000054  2140              MOVS     r1,#0x40
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       USART_ClearFlag
;;;61     	USART_ClearFlag(USARTx,USART_IT_RXNE);
00005c  f2405425          MOV      r4,#0x525
000060  4621              MOV      r1,r4
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       USART_ClearFlag
;;;62     	USART_ClearITPendingBit(USARTx,USART_IT_TC);
000068  f2406126          MOV      r1,#0x626
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       USART_ClearITPendingBit
;;;63     	USART_ITConfig(USARTx,USART_IT_RXNE,ENABLE); //允许接收中断
000072  2201              MOVS     r2,#1
000074  4621              MOV      r1,r4
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       USART_ITConfig
;;;64     
;;;65     }
00007c  b007              ADD      sp,sp,#0x1c
00007e  bd30              POP      {r4,r5,pc}
;;;66     
                          ENDP


                          AREA ||i.USARTGpioConfig||, CODE, READONLY, ALIGN=1

                  USARTGpioConfig PROC
;;;4      
;;;5      void USARTGpioConfig(USARTInfo_s *UsartInfo)
000000  b538              PUSH     {r3-r5,lr}
;;;6      {
000002  4604              MOV      r4,r0
;;;7      	GPIO_InitTypeDef GPIO_InitStructure;		//声明一个结构体变量
;;;8      
;;;9      	GPIO_InitStructure.GPIO_Pin = UsartInfo->GPIO_Pin_txd;
000004  8800              LDRH     r0,[r0,#0]
000006  f8ad0000          STRH     r0,[sp,#0]
;;;10     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;11     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000010  2018              MOVS     r0,#0x18
000012  f88d0003          STRB     r0,[sp,#3]
;;;12     	GPIO_Init(UsartInfo->GPIO_USART,&GPIO_InitStructure);	
000016  4669              MOV      r1,sp
000018  6860              LDR      r0,[r4,#4]
00001a  f7fffffe          BL       GPIO_Init
;;;13     
;;;14     	GPIO_InitStructure.GPIO_Pin = UsartInfo->GPIO_Pin_rxd; 	//PA10---RXD
00001e  8860              LDRH     r0,[r4,#2]
000020  f8ad0000          STRH     r0,[sp,#0]
;;;15     	//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;16     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	 //复用输入
000024  2004              MOVS     r0,#4
000026  f88d0003          STRB     r0,[sp,#3]
;;;17     	GPIO_Init(UsartInfo->GPIO_USART,&GPIO_InitStructure);		
00002a  4669              MOV      r1,sp
00002c  6860              LDR      r0,[r4,#4]
00002e  f7fffffe          BL       GPIO_Init
;;;18     } 
000032  bd38              POP      {r3-r5,pc}
;;;19     
                          ENDP


                          AREA ||i.USARTInit||, CODE, READONLY, ALIGN=2

                  USARTInit PROC
;;;67     
;;;68     void USARTInit(USART_TypeDef* USARTx,uint32_t USART_BaudRate,GPIO_TypeDef* GPIO_USART,
000000  b570              PUSH     {r4-r6,lr}
;;;69     					uint16_t GPIO_Pin_txd,uint16_t GPIO_Pin_rxd)
;;;70     {
;;;71     	switch((uint32_t)USARTx)
000002  4d16              LDR      r5,|L5.92|
000004  9c04              LDR      r4,[sp,#0x10]
000006  1945              ADDS     r5,r0,r5
;;;72     	{
;;;73     		case (uint32_t)USART1:
;;;74     				{
;;;75     					mdUsart.USART1_s.GPIO_Pin_rxd = GPIO_Pin_rxd;
000008  4815              LDR      r0,|L5.96|
00000a  d010              BEQ      |L5.46|
00000c  f5b54f74          CMP      r5,#0xf400            ;71
000010  d122              BNE      |L5.88|
000012  8044              STRH     r4,[r0,#2]
;;;76     					mdUsart.USART1_s.GPIO_Pin_txd = GPIO_Pin_txd;
000014  8003              STRH     r3,[r0,#0]
000016  e9c02101          STRD     r2,r1,[r0,#4]
;;;77     					mdUsart.USART1_s.USART_BaudRate = USART_BaudRate;
;;;78     					mdUsart.USART1_s.GPIO_USART = GPIO_USART;
;;;79     					
;;;80     					USARTGpioConfig(&mdUsart.USART1_s);/*io口配置*/
00001a  f7fffffe          BL       USARTGpioConfig
;;;81     					USARTNvicConfig(USART1_IRQn,7,0);
00001e  2200              MOVS     r2,#0
000020  2107              MOVS     r1,#7
000022  2025              MOVS     r0,#0x25
000024  f7fffffe          BL       USARTNvicConfig
;;;82     					USARTConfig(USART1,&mdUsart.USART1_s);
000028  490d              LDR      r1,|L5.96|
00002a  480e              LDR      r0,|L5.100|
;;;83     					break;
00002c  e010              B        |L5.80|
                  |L5.46|
;;;84     				}
;;;85     		case (uint32_t)USART2:
;;;86     				{
;;;87     					mdUsart.USART2_s.GPIO_Pin_rxd = GPIO_Pin_rxd;
00002e  8244              STRH     r4,[r0,#0x12]
;;;88     					mdUsart.USART2_s.GPIO_Pin_txd = GPIO_Pin_txd;
000030  8203              STRH     r3,[r0,#0x10]
000032  e9c02105          STRD     r2,r1,[r0,#0x14]
;;;89     					mdUsart.USART2_s.USART_BaudRate = USART_BaudRate;
;;;90     					mdUsart.USART2_s.GPIO_USART = GPIO_USART;
;;;91     					
;;;92     					USARTGpioConfig(&mdUsart.USART2_s);/*io口配置*/
000036  480a              LDR      r0,|L5.96|
000038  3010              ADDS     r0,r0,#0x10
00003a  4604              MOV      r4,r0
00003c  f7fffffe          BL       USARTGpioConfig
;;;93     					USARTNvicConfig(USART2_IRQn,0,0);
000040  2200              MOVS     r2,#0
000042  4611              MOV      r1,r2
000044  2026              MOVS     r0,#0x26
000046  f7fffffe          BL       USARTNvicConfig
;;;94     					USARTConfig(USART2,&mdUsart.USART2_s);
00004a  4804              LDR      r0,|L5.92|
00004c  4621              MOV      r1,r4                 ;93
00004e  4240              RSBS     r0,r0,#0
                  |L5.80|
000050  e8bd4070          POP      {r4-r6,lr}
000054  f7ffbffe          B.W      USARTConfig
                  |L5.88|
;;;95     					break;
;;;96     				}
;;;97     	}
;;;98     }
000058  bd70              POP      {r4-r6,pc}
;;;99     void USARTWrite(USART_TypeDef* USARTx,char *Buff,uint16_t sizes)
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      0xbfffbc00
                  |L5.96|
                          DCD      ||.bss||
                  |L5.100|
                          DCD      0x40013800

                          AREA ||i.USARTNvicConfig||, CODE, READONLY, ALIGN=1

                  USARTNvicConfig PROC
;;;19     
;;;20     void USARTNvicConfig(uint8_t NVIC_IRQChannel,uint8_t MasterPro,uint8_t SlaPro)
000000  b5f8              PUSH     {r3-r7,lr}
;;;21     {
000002  4606              MOV      r6,r0
000004  4614              MOV      r4,r2
000006  460d              MOV      r5,r1
;;;22     		/*NVIC 的设置方法以及循序
;;;23     		1、NVIC_IRQChannel;设置中断号
;;;24     		2、NVIC_IRQChannelPreemptionPriority;设置先占优先级 
;;;25     		3、NVIC_IRQChannelSubPriority;//设置从优先级 
;;;26     		4、NVIC_IRQChannelCmd使能
;;;27     	*/
;;;28     	NVIC_InitTypeDef NVIC_Config;
;;;29     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
000008  f44f7040          MOV      r0,#0x300
00000c  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;30     	NVIC_Config.NVIC_IRQChannel = NVIC_IRQChannel;  //选择中断源 
000010  f88d6000          STRB     r6,[sp,#0]
;;;31     	NVIC_Config.NVIC_IRQChannelPreemptionPriority= MasterPro;  //抢占优先级0
000014  f88d5001          STRB     r5,[sp,#1]
;;;32     	NVIC_Config.NVIC_IRQChannelSubPriority = SlaPro; //从优先级为0
000018  f88d4002          STRB     r4,[sp,#2]
;;;33     	NVIC_Config.NVIC_IRQChannelCmd = ENABLE;//使能
00001c  2001              MOVS     r0,#1
00001e  f88d0003          STRB     r0,[sp,#3]
;;;34     	
;;;35     	NVIC_Init (&NVIC_Config);	
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       NVIC_Init
;;;36     }
000028  bdf8              POP      {r3-r7,pc}
;;;37     
                          ENDP


                          AREA ||i.USARTSendChar||, CODE, READONLY, ALIGN=2

                  USARTSendChar PROC
;;;108    }
;;;109    void USARTSendChar(USART_TypeDef* USARTx,char chars)
000000  4a0e              LDR      r2,|L7.60|
;;;110    {
000002  b510              PUSH     {r4,lr}
;;;111    	switch((uint32_t)USARTx)
000004  1880              ADDS     r0,r0,r2
000006  d00d              BEQ      |L7.36|
000008  f5b04f74          CMP      r0,#0xf400
00000c  d109              BNE      |L7.34|
;;;112    	{
;;;113    		case (uint32_t)USART1:
;;;114    				{
;;;115    					USART_SendData(USART1,(uint16_t)chars);
00000e  4c0c              LDR      r4,|L7.64|
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USART_SendData
                  |L7.22|
;;;116    					while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)!=SET);
000016  2180              MOVS     r1,#0x80
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       USART_GetFlagStatus
00001e  2801              CMP      r0,#1
000020  d1f9              BNE      |L7.22|
                  |L7.34|
;;;117    					break;
;;;118    				}
;;;119    		case (uint32_t)USART2:
;;;120    				{
;;;121    					USART_SendData(USART2,(uint16_t)chars);
;;;122    					while(USART_GetFlagStatus(USART2,USART_FLAG_TXE)!=SET);
;;;123    					break;
;;;124    				}
;;;125    	}
;;;126    	
;;;127    }
000022  bd10              POP      {r4,pc}
                  |L7.36|
000024  4c05              LDR      r4,|L7.60|
000026  4264              RSBS     r4,r4,#0              ;121
000028  4620              MOV      r0,r4                 ;121
00002a  f7fffffe          BL       USART_SendData
                  |L7.46|
00002e  2180              MOVS     r1,#0x80              ;122
000030  4620              MOV      r0,r4                 ;122
000032  f7fffffe          BL       USART_GetFlagStatus
000036  2801              CMP      r0,#1                 ;122
000038  d1f9              BNE      |L7.46|
00003a  bd10              POP      {r4,pc}
;;;128    void USARTSendString(USART_TypeDef* USARTx,char *Message)
                          ENDP

                  |L7.60|
                          DCD      0xbfffbc00
                  |L7.64|
                          DCD      0x40013800

                          AREA ||i.USARTSendString||, CODE, READONLY, ALIGN=1

                  USARTSendString PROC
;;;127    }
;;;128    void USARTSendString(USART_TypeDef* USARTx,char *Message)
000000  b570              PUSH     {r4-r6,lr}
;;;129    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;130    	while(*Message)
;;;131    	{
;;;132    		USARTSendChar(USARTx,*Message++);
000006  e003              B        |L8.16|
                  |L8.8|
000008  4628              MOV      r0,r5
00000a  1c64              ADDS     r4,r4,#1
00000c  f7fffffe          BL       USARTSendChar
                  |L8.16|
000010  7821              LDRB     r1,[r4,#0]            ;130
000012  2900              CMP      r1,#0                 ;130
000014  d1f8              BNE      |L8.8|
;;;133    	}
;;;134    }
000016  bd70              POP      {r4-r6,pc}
;;;135    
                          ENDP


                          AREA ||i.USARTWrite||, CODE, READONLY, ALIGN=1

                  USARTWrite PROC
;;;98     }
;;;99     void USARTWrite(USART_TypeDef* USARTx,char *Buff,uint16_t sizes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;100    {
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
000008  4607              MOV      r7,r0
;;;101    	uint16_t uiLoop = 0;
00000a  2400              MOVS     r4,#0
00000c  e00b              B        |L9.38|
                  |L9.14|
;;;102    	while(uiLoop < sizes)
;;;103    	{
;;;104    		USART_SendData(USARTx,(char)Buff[uiLoop]);
00000e  5d31              LDRB     r1,[r6,r4]
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       USART_SendData
                  |L9.22|
;;;105    		while(USART_GetFlagStatus(USARTx,USART_FLAG_TXE)!=SET);
000016  2180              MOVS     r1,#0x80
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       USART_GetFlagStatus
00001e  2801              CMP      r0,#1
000020  d1f9              BNE      |L9.22|
000022  1c64              ADDS     r4,r4,#1
;;;106    		uiLoop++;
000024  b2a4              UXTH     r4,r4
                  |L9.38|
000026  42ac              CMP      r4,r5                 ;102
000028  d3f1              BCC      |L9.14|
;;;107    	}
;;;108    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;109    void USARTSendChar(USART_TypeDef* USARTx,char chars)
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mdUsart
                          %        32
